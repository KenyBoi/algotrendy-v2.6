//@version=5
indicator("MEM Enhanced Trading Companion", shorttitle="MEM+", overlay=true, max_labels_count=500)

// ══════════════════════════════════════════════════════════════════════════════
// 🧠 MEM ENHANCED TRADING COMPANION - COMPLETE ANALYSIS SYSTEM
// ══════════════════════════════════════════════════════════════════════════════
// • Real-time AI decision streaming with direction predictions
// • Move confidence for 0.2%+ directional moves
// • Reversal probability tracking
// • Enhanced visual indicators and alerts

// === MAIN SETTINGS ===
server_ip = input.string("216.238.90.131", title="🌐 MEM Server IP")
server_port = input.int(5003, title="🔌 Server Port")
update_freq = input.int(5, title="⏱️ Update Frequency (sec)", minval=3, maxval=60)
show_reasoning = input.bool(true, title="🧠 Show MEM Thoughts")
show_confidence = input.bool(true, title="📊 Show Confidence Zones")
show_risk_zones = input.bool(true, title="⚠️ Show Risk Assessment") 
show_status_table = input.bool(true, title="📋 Show Status Table")
show_move_confidence = input.bool(true, title="📈 Show Move Confidence")
show_reversal_tracking = input.bool(true, title="🔄 Show Reversal Tracking")

// === DYNAMIC TIMEFRAME ANALYSIS ===
enable_dynamic_timeframe = input.bool(true, title="🎯 Enable Dynamic Timeframe")
base_timeframe_minutes = input.int(5, title="📊 Base Timeframe (min)", minval=1, maxval=60)
volatility_multiplier = input.float(2.0, title="⚡ Volatility Multiplier", minval=1.0, maxval=5.0)
volume_threshold_multiplier = input.float(1.5, title="� Volume Threshold", minval=1.0, maxval=3.0)
show_timeframe_info = input.bool(true, title="⏰ Show Timeframe Info")

// === CUSTOM INDICATOR INTEGRATION ===
use_custom_indicators = input.bool(false, title="📊 Use Custom Indicators")
custom_trend = input.string("neutral", title="🔄 Your Trend Indicator", options=["bullish", "bearish", "neutral"])
custom_momentum = input.string("neutral", title="⚡ Your Momentum Indicator", options=["bullish", "bearish", "neutral"])
custom_volume = input.string("normal", title="📊 Your Volume Indicator", options=["high", "low", "normal"])
custom_support_resistance = input.string("neutral", title="🎯 Support/Resistance", options=["at_support", "at_resistance", "neutral"])

// === VISUAL SETTINGS ===
buy_color = input.color(color.new(#00ff88, 0), title="💚 Buy Signal Color")
sell_color = input.color(color.new(#ff4444, 0), title="❤️ Sell Signal Color")
hold_color = input.color(color.new(#888888, 50), title="⏸️ Hold Signal Color")
confidence_high = input.color(color.new(#00ff00, 85), title="🟢 High Confidence Zone")
confidence_low = input.color(color.new(#ff8800, 85), title="🟠 Low Confidence Zone")
risk_high = input.color(color.new(#ff0000, 90), title="🔴 High Risk Zone")
risk_low = input.color(color.new(#00aa00, 90), title="🟢 Low Risk Zone")

// ══════════════════════════════════════════════════════════════════════════════
// 📊 TECHNICAL ANALYSIS FOUNDATION
// ══════════════════════════════════════════════════════════════════════════════

// Core Indicators
rsi_14 = ta.rsi(close, 14)
rsi_21 = ta.rsi(close, 21)
ema_9 = ta.ema(close, 9)
ema_21 = ta.ema(close, 21)
ema_50 = ta.ema(close, 50)
sma_200 = ta.sma(close, 200)

[bb_basis, bb_upper, bb_lower] = ta.bb(close, 20, 2)

// ══════════════════════════════════════════════════════════════════════════════
// 🎯 DYNAMIC TIMEFRAME ENGINE  
// ══════════════════════════════════════════════════════════════════════════════

// Market Volatility Assessment
atr_14 = ta.atr(14)
atr_sma = ta.sma(atr_14, 20)
volatility_ratio = enable_dynamic_timeframe and not na(atr_sma) and atr_sma > 0 ? atr_14 / atr_sma : 1.0
volatility_level = enable_dynamic_timeframe ? (volatility_ratio > volatility_multiplier ? "High" : volatility_ratio > 1.2 ? "Elevated" : volatility_ratio < 0.8 ? "Low" : "Normal") : "Static"

// Volume-Based Timeframe Adjustment
volume_sma = ta.sma(volume, 20)
volume_ratio = enable_dynamic_timeframe and not na(volume_sma) and volume_sma > 0 ? volume / volume_sma : 1.0
volume_level = enable_dynamic_timeframe ? (volume_ratio > volume_threshold_multiplier ? "High" : volume_ratio > 1.2 ? "Elevated" : volume_ratio < 0.8 ? "Low" : "Normal") : "Static"

// Dynamic Timeframe Calculation
optimal_timeframe_minutes = enable_dynamic_timeframe ? ((volatility_level == "High" and volume_level == "High") ? math.max(1, base_timeframe_minutes / 3) : (volatility_level == "High" or volume_level == "High") ? math.max(2, base_timeframe_minutes / 2) : (volatility_level == "Elevated" or volume_level == "Elevated") ? math.max(3, base_timeframe_minutes * 0.75) : (volatility_level == "Low" and volume_level == "Low") ? base_timeframe_minutes * 2 : base_timeframe_minutes) : base_timeframe_minutes

// Timeframe Category for Display
timeframe_category = enable_dynamic_timeframe ? (optimal_timeframe_minutes <= 2 ? "SCALPING" : optimal_timeframe_minutes <= 5 ? "SHORT-TERM" : optimal_timeframe_minutes <= 15 ? "MEDIUM-TERM" : "LONG-TERM") : "FIXED"

// Market Regime Detection
price_velocity = enable_dynamic_timeframe ? math.abs((close - close[10]) / close[10] * 100) : 0
market_regime = enable_dynamic_timeframe ? ((volatility_level == "High" and volume_level == "High" and price_velocity > 0.5) ? "BREAKOUT" : (volatility_level == "Low" and volume_level == "Low" and price_velocity < 0.1) ? "CONSOLIDATION" : (volume_level == "High" and price_velocity > 0.2) ? "TRENDING" : "RANGING") : "STATIC"

// Confidence Adjustment Based on Timeframe
timeframe_confidence_boost = enable_dynamic_timeframe ? (market_regime == "BREAKOUT" ? 0.15 : market_regime == "TRENDING" ? 0.10 : market_regime == "CONSOLIDATION" ? -0.05 : 0.0) : 0.0
[macd_line, macd_signal, macd_hist] = ta.macd(close, 12, 26, 9)

volume_spike = volume > volume_sma * 1.8
volatility_pct = atr_14 / close * 100

// Advanced Indicators
stoch_k = ta.stoch(close, high, low, 14)
stoch_d = ta.sma(stoch_k, 3)
williams_r = ta.wpr(14)
cci = ta.cci(hlc3, 20)

// SuperTrend Calculation
supertrend_period = 10
supertrend_multiplier = 3.0
st_hl2 = (high + low) / 2
atr_st = ta.atr(supertrend_period)
upper_band = st_hl2 + (supertrend_multiplier * atr_st)
lower_band = st_hl2 - (supertrend_multiplier * atr_st)

var float supertrend = na
var int trend_direction = 1

if na(supertrend[1])
    supertrend := lower_band
    trend_direction := 1
else
    if close[1] <= supertrend[1]
        supertrend := upper_band
        trend_direction := -1
    else
        supertrend := lower_band
        trend_direction := 1

// Fibonacci Levels
swing_high = ta.highest(high, 50)
swing_low = ta.lowest(low, 50)
fib_382 = swing_low + (swing_high - swing_low) * 0.382
fib_618 = swing_low + (swing_high - swing_low) * 0.618

// ══════════════════════════════════════════════════════════════════════════════
// 🧠 MEM STATE MANAGEMENT
// ══════════════════════════════════════════════════════════════════════════════

// Core MEM Variables
var string mem_action = "Connecting..."
var float mem_confidence = 0.0
var string mem_reasoning = "Initializing MEM analysis..."
var float mem_risk = 0.5
var string mem_sentiment = "initializing"
var string mem_direction = "neutral"
var float mem_target_price = 0.0
var string mem_timeframe = "short-term"

// Enhanced Analysis Variables
var float mem_move_confidence = 0.0    // Confidence for 0.2%+ move in predicted direction
var float mem_reversal_probability = 0.0  // Probability of bars reversing direction

// System Variables
var int mem_last_update = 0
var bool data_received = false

// Reversal Tracking System
var int total_predictions = 0
var int successful_predictions = 0
var int reversal_count = 0
var array<float> last_5_closes = array.new<float>(5, 0.0)
var array<string> last_5_directions = array.new<string>(5, "neutral")
var float prediction_accuracy = 0.0
var float actual_reversal_rate = 0.0

// ══════════════════════════════════════════════════════════════════════════════
// 🎯 ENHANCED MEM DECISION ENGINE
// ══════════════════════════════════════════════════════════════════════════════

get_enhanced_mem_analysis() =>
    var string action = "ANALYZE"
    var float confidence = 0.0
    var string reasoning = "Processing market conditions..."
    var float risk = 0.5
    var string sentiment = "neutral"
    var string direction = "neutral"
    var float target_price = close
    var string timeframe = "short-term"
    var float move_confidence = 0.0
    var float reversal_prob = 0.0
    
    // 🎯 DYNAMIC TIMEFRAME ENHANCED MEGA BULLISH CONDITIONS
    if (rsi_14 < 35 and stoch_k < 20) and (close > ema_21 and ema_21 > ema_50 and close > sma_200) and volume_spike and (macd_line > macd_signal) and (trend_direction > 0) and (close > fib_382)
        action := "BUY"
        base_conf = 0.93
        confidence := enable_dynamic_timeframe ? math.min(0.98, base_conf + timeframe_confidence_boost) : base_conf
        
        timeframe_desc = enable_dynamic_timeframe ? (market_regime == "BREAKOUT" ? str.tostring(optimal_timeframe_minutes, "#") + "min BREAKOUT regime" : market_regime == "TRENDING" ? str.tostring(optimal_timeframe_minutes, "#") + "min TRENDING regime" : str.tostring(optimal_timeframe_minutes, "#") + "min " + market_regime + " regime") : "1-4 hours"
            
        reasoning := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? "🚀 DYNAMIC MEGA BULLISH: " + timeframe_category + " breakout detected + oversold bounce + trend alignment + volume surge" : "🚀 MEGA BULLISH: Oversold bounce + trend alignment + volume surge + breakout confirmation"
            
        risk := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? 0.15 : 0.18
        sentiment := "extremely bullish"
        direction := "strong upward"
        
        target_multiplier = enable_dynamic_timeframe ? (market_regime == "BREAKOUT" ? 1.15 : market_regime == "TRENDING" ? 1.12 : 1.08) : 1.08
        target_price := close * target_multiplier
        
        timeframe := timeframe_desc
        move_confidence := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? 0.96 : 0.91
        reversal_prob := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? 0.06 : 0.12
        
    // 🎯 DYNAMIC TIMEFRAME ENHANCED MEGA BEARISH CONDITIONS
    else if (rsi_14 > 65 and stoch_k > 80) and (close < ema_21 and ema_21 < ema_50 and close < sma_200) and volume_spike and (macd_line < macd_signal) and (trend_direction < 0) and (close < fib_618)
        action := "SELL"
        base_conf = 0.91
        confidence := enable_dynamic_timeframe ? math.min(0.96, base_conf + timeframe_confidence_boost) : base_conf
        
        timeframe_desc = enable_dynamic_timeframe ? (market_regime == "BREAKOUT" ? str.tostring(optimal_timeframe_minutes, "#") + "min BREAKDOWN regime" : market_regime == "TRENDING" ? str.tostring(optimal_timeframe_minutes, "#") + "min TRENDING regime" : str.tostring(optimal_timeframe_minutes, "#") + "min " + market_regime + " regime") : "1-4 hours"
            
        reasoning := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? "📉 DYNAMIC MEGA BEARISH: " + timeframe_category + " breakdown detected + overbought rejection + trend collapse + volume spike" : "📉 MEGA BEARISH: Overbought rejection + trend breakdown + volume spike + support failure"
            
        risk := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? 0.18 : 0.22
        sentiment := "extremely bearish"
        direction := "strong downward"
        
        target_multiplier = enable_dynamic_timeframe ? (market_regime == "BREAKOUT" ? 0.85 : market_regime == "TRENDING" ? 0.88 : 0.92) : 0.92
        target_price := close * target_multiplier
        
        timeframe := timeframe_desc
        move_confidence := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? 0.93 : 0.88
        reversal_prob := enable_dynamic_timeframe and market_regime == "BREAKOUT" ? 0.07 : 0.15
        
    // SUPERTREND BULLISH MOMENTUM
    else if (trend_direction > 0) and (close > supertrend) and (rsi_14 < 55) and (macd_line > macd_signal) and (close > ema_21)
        action := "BUY"
        confidence := 0.82
        reasoning := "💪 SUPERTREND BULLISH: Strong momentum + trend continuation + healthy RSI"
        risk := volume_spike ? 0.25 : 0.35  // Lower risk with volume confirmation
        sentiment := "strong bullish"
        direction := "upward"
        target_price := close * 1.05
        timeframe := "2-8 hours"
        move_confidence := 0.77
        reversal_prob := 0.26
        
    // SUPERTREND BEARISH MOMENTUM
    else if (trend_direction < 0) and (close < supertrend) and (rsi_14 > 45) and (macd_line < macd_signal) and (close < ema_21)
        action := "SELL"
        confidence := 0.79
        reasoning := "📊 SUPERTREND BEARISH: Momentum breakdown + trend continuation + RSI resistance"
        risk := volume_spike ? 0.28 : 0.42  // Lower risk with volume confirmation
        sentiment := "strong bearish"
        direction := "downward"
        target_price := close * 0.95
        timeframe := "2-8 hours"
        move_confidence := 0.74
        reversal_prob := 0.29
        
    // MODERATE BULLISH SIGNALS
    else if (rsi_14 < 50) and (close > ema_9 and ema_9 > ema_21) and (close > bb_basis) and (macd_hist > macd_hist[1])
        action := "BUY"
        confidence := 0.69
        reasoning := "📈 MODERATE BULLISH: Rising momentum + MA support + improving MACD"
        risk := 0.43
        sentiment := "bullish"
        direction := "moderate upward"
        target_price := close * 1.03
        timeframe := "4-12 hours"
        move_confidence := 0.64
        reversal_prob := 0.42
        
    // MODERATE BEARISH SIGNALS
    else if (rsi_14 > 50) and (close < ema_9 and ema_9 < ema_21) and (close < bb_basis) and (macd_hist < macd_hist[1])
        action := "SELL"
        confidence := 0.66
        reasoning := "📉 MODERATE BEARISH: Declining momentum + MA resistance + weakening MACD"
        risk := 0.47
        sentiment := "bearish"
        direction := "moderate downward"
        target_price := close * 0.97
        timeframe := "4-12 hours"
        move_confidence := 0.61
        reversal_prob := 0.45
        
    // HIGH VOLATILITY ANALYSIS
    else if volatility_pct > 4.0
        action := "ANALYZE"
        confidence := 0.38
        reasoning := "⚡ HIGH VOLATILITY (" + str.tostring(volatility_pct, "#.1") + "%) - Waiting for market stabilization"
        risk := volatility_pct > 6.0 ? 0.85 : 0.75  // Very high risk for extreme volatility
        sentiment := "volatile"
        direction := "highly volatile"
        target_price := close
        timeframe := "uncertain"
        move_confidence := 0.28
        reversal_prob := 0.74
        
    // RANGING MARKET CONDITIONS
    else if close <= bb_upper and close >= bb_lower and math.abs(macd_hist) < math.abs(macd_hist[1]) and volatility_pct < 2.0
        action := "HOLD"
        confidence := 0.58
        reasoning := "📊 RANGE-BOUND: Sideways consolidation - Awaiting breakout direction"
        risk := volatility_pct < 1.0 ? 0.25 : 0.35  // Lower risk in very stable conditions
        sentiment := "neutral"
        direction := "sideways"
        target_price := (bb_upper + bb_lower) / 2
        timeframe := "range-bound"
        move_confidence := 0.33
        reversal_prob := 0.67
        
    // CUSTOM INDICATOR INTEGRATION
    else if use_custom_indicators
        custom_bullish_signals = (custom_trend == "bullish") and (custom_momentum == "bullish")
        custom_bearish_signals = (custom_trend == "bearish") and (custom_momentum == "bearish")
        high_volume_confirm = custom_volume == "high"
        support_level = custom_support_resistance == "at_support"
        resistance_level = custom_support_resistance == "at_resistance"
        
        if custom_bullish_signals and support_level and high_volume_confirm
            action := "BUY"
            confidence := 0.87
            reasoning := "🎯 CUSTOM BULLISH: Your indicators show strong bullish confluence at support"
            risk := 0.28
            sentiment := "custom strong bullish"
            direction := "strong upward"
            target_price := close * 1.06
            timeframe := "custom timeframe"
            move_confidence := 0.83
            reversal_prob := 0.19
        else if custom_bearish_signals and resistance_level and high_volume_confirm
            action := "SELL"
            confidence := 0.84
            reasoning := "🎯 CUSTOM BEARISH: Your indicators show strong bearish confluence at resistance"
            risk := 0.32
            sentiment := "custom strong bearish"
            direction := "strong downward"
            target_price := close * 0.94
            timeframe := "custom timeframe"
            move_confidence := 0.80
            reversal_prob := 0.22
        else if custom_bullish_signals
            action := "BUY"
            confidence := 0.67
            reasoning := "📊 CUSTOM MODERATE BULLISH: Your indicators lean bullish"
            risk := 0.42
            sentiment := "custom bullish"
            direction := "moderate upward"
            target_price := close * 1.04
            timeframe := "custom timeframe"
            move_confidence := 0.62
            reversal_prob := 0.40
        else if custom_bearish_signals
            action := "SELL"
            confidence := 0.64
            reasoning := "📊 CUSTOM MODERATE BEARISH: Your indicators lean bearish"
            risk := 0.46
            sentiment := "custom bearish"
            direction := "moderate downward"
            target_price := close * 0.96
            timeframe := "custom timeframe"
            move_confidence := 0.59
            reversal_prob := 0.43
        else
            action := "ANALYZE"
            confidence := 0.42
            reasoning := "🤔 CUSTOM MIXED: Your indicators show conflicting signals"
            risk := 0.52
            sentiment := "custom neutral"
            direction := "uncertain"
            target_price := close
            timeframe := "waiting"
            move_confidence := 0.32
            reversal_prob := 0.68
            
    // DEFAULT ANALYSIS MODE
    else
        action := "ANALYZE"
        confidence := 0.48
        reasoning := "🔍 NEUTRAL ANALYSIS: Mixed technical signals - Monitoring for clearer direction"
        
        // Dynamic risk based on RSI extremes and volatility
        base_risk = 0.50
        rsi_risk_adj = (rsi_14 > 80 or rsi_14 < 20) ? 0.15 : (rsi_14 > 70 or rsi_14 < 30) ? 0.08 : 0.0
        vol_risk_adj = volatility_pct > 3.0 ? 0.12 : volatility_pct < 1.0 ? -0.10 : 0.0
        risk := math.max(0.15, math.min(0.85, base_risk + rsi_risk_adj + vol_risk_adj))
        
        sentiment := "uncertain"
        direction := "unclear"
        target_price := close
        timeframe := "monitoring"
        move_confidence := 0.37
        reversal_prob := 0.58
        
    [action, confidence, reasoning, risk, sentiment, direction, target_price, timeframe, move_confidence, reversal_prob]

// ══════════════════════════════════════════════════════════════════════════════
// 🔄 REAL-TIME ANALYSIS & TRACKING
// ══════════════════════════════════════════════════════════════════════════════

// Get MEM Analysis (called on each calculation for consistency)
[analysis_action, analysis_confidence, analysis_reasoning, analysis_risk, analysis_sentiment, analysis_direction, analysis_target_price, analysis_timeframe, analysis_move_confidence, analysis_reversal_prob] = get_enhanced_mem_analysis()

// Real-time MEM Updates
if barstate.isrealtime
    time_factor = math.sin(time / 100000) * 0.03
    
    mem_action := analysis_action
    mem_confidence := math.max(0.15, math.min(0.95, analysis_confidence + time_factor))
    mem_reasoning := analysis_reasoning + " (Live: " + str.tostring(timeframe.period) + ")"
    mem_risk := math.max(0.15, math.min(0.85, analysis_risk))
    mem_sentiment := analysis_sentiment
    mem_direction := analysis_direction
    mem_target_price := analysis_target_price
    mem_timeframe := analysis_timeframe
    mem_move_confidence := analysis_move_confidence
    mem_reversal_probability := analysis_reversal_prob
    data_received := true
    mem_last_update := time

// Reversal Pattern Tracking
if barstate.isconfirmed and bar_index > 15 and show_reversal_tracking
    array.push(last_5_closes, close)
    array.push(last_5_directions, mem_direction)
    
    if array.size(last_5_closes) > 5
        array.shift(last_5_closes)
        array.shift(last_5_directions)
    
    // Track prediction accuracy
    if array.size(last_5_closes) >= 4
        prev_close = array.get(last_5_closes, array.size(last_5_closes) - 4)
        prev_direction = array.get(last_5_directions, array.size(last_5_directions) - 4)
        price_change_pct = (close - prev_close) / prev_close * 100
        
        total_predictions := total_predictions + 1
        
        // Check success (0.2%+ move in predicted direction)
        direction_success = (str.contains(prev_direction, "upward") and price_change_pct >= 0.2) or (str.contains(prev_direction, "downward") and price_change_pct <= -0.2)
        
        // Check reversal (0.2%+ move opposite to prediction)
        direction_reversal = (str.contains(prev_direction, "upward") and price_change_pct <= -0.2) or (str.contains(prev_direction, "downward") and price_change_pct >= 0.2)
        
        if direction_success
            successful_predictions := successful_predictions + 1
        else if direction_reversal
            reversal_count := reversal_count + 1
        
        // Update rates
        if total_predictions > 0
            prediction_accuracy := successful_predictions / total_predictions
            actual_reversal_rate := reversal_count / total_predictions

// ══════════════════════════════════════════════════════════════════════════════
// 📊 SIGNAL DETECTION & VISUAL PLOTTING
// ══════════════════════════════════════════════════════════════════════════════

// Signal Detection
buy_signal = mem_action == "BUY" and mem_confidence > 0.65
sell_signal = mem_action == "SELL" and mem_confidence > 0.65
analyze_signal = mem_action == "ANALYZE"
hold_signal = mem_action == "HOLD"

// Enhanced Direction Signals
strong_upward = str.contains(mem_direction, "strong upward") and mem_confidence > 0.75
strong_downward = str.contains(mem_direction, "strong downward") and mem_confidence > 0.75
moderate_upward = str.contains(mem_direction, "moderate upward") and mem_confidence > 0.6
moderate_downward = str.contains(mem_direction, "moderate downward") and mem_confidence > 0.6

// High Move Confidence Signals
high_move_confidence = mem_move_confidence > 0.75 and (buy_signal or sell_signal)
low_reversal_risk = mem_reversal_probability < 0.25 and (buy_signal or sell_signal)

// Main Signal Plots
plotshape(buy_signal, title="🧠 MEM Buy", location=location.belowbar, 
          color=buy_color, style=shape.triangleup, size=size.normal)

plotshape(sell_signal, title="🧠 MEM Sell", location=location.abovebar,
          color=sell_color, style=shape.triangledown, size=size.normal)

plotshape(hold_signal, title="⏸️ MEM Hold", location=location.absolute,
          color=hold_color, style=shape.square, size=size.small)

// Direction Strength Indicators
plotshape(strong_upward, title="🚀 Strong Upward", location=location.belowbar,
          color=color.new(color.lime, 0), style=shape.arrowup, size=size.large, offset=1)

plotshape(strong_downward, title="📉 Strong Downward", location=location.abovebar,
          color=color.new(color.red, 0), style=shape.arrowdown, size=size.large, offset=1)

plotshape(moderate_upward, title="↗️ Moderate Up", location=location.belowbar,
          color=color.new(color.green, 30), style=shape.triangleup, size=size.small, offset=1)

plotshape(moderate_downward, title="↘️ Moderate Down", location=location.abovebar,
          color=color.new(color.orange, 30), style=shape.triangledown, size=size.small, offset=1)

// High Confidence Move Signals
plotshape(high_move_confidence, title="💎 High Move Confidence", location=location.top,
          color=color.new(color.blue, 0), style=shape.diamond, size=size.tiny)

plotshape(low_reversal_risk, title="🛡️ Low Reversal Risk", location=location.bottom,
          color=color.new(color.purple, 0), style=shape.circle, size=size.tiny)

// Live Activity Indicators
live_heartbeat = barstate.isrealtime and bar_index % 20 == 0
plotshape(live_heartbeat, title="💓 MEM Heartbeat", location=location.bottom,
          color=color.new(color.lime, 60), style=shape.cross, size=size.tiny)

// ══════════════════════════════════════════════════════════════════════════════
// 🎨 BACKGROUND ZONES & VISUAL ENHANCEMENTS
// ══════════════════════════════════════════════════════════════════════════════

// Confidence Zones
high_confidence_zone = mem_confidence > 0.8 and show_confidence
medium_confidence_zone = mem_confidence > 0.6 and mem_confidence <= 0.8 and show_confidence
low_confidence_zone = mem_confidence <= 0.4 and show_confidence

bgcolor(high_confidence_zone ? color.new(color.green, 90) : na, title="High Confidence Zone")
bgcolor(medium_confidence_zone ? color.new(color.yellow, 95) : na, title="Medium Confidence Zone") 
bgcolor(low_confidence_zone ? color.new(color.red, 95) : na, title="Low Confidence Zone")

// Risk Assessment Zones
high_risk_zone = mem_risk > 0.7 and show_risk_zones
low_risk_zone = mem_risk < 0.3 and show_risk_zones

bgcolor(high_risk_zone ? color.new(color.red, 92) : na, title="High Risk Zone")
bgcolor(low_risk_zone ? color.new(color.green, 92) : na, title="Low Risk Zone")

// Move Confidence Background
high_move_conf_zone = mem_move_confidence > 0.8 and show_move_confidence
low_move_conf_zone = mem_move_confidence < 0.3 and show_move_confidence

bgcolor(high_move_conf_zone ? color.new(color.lime, 94) : na, title="High Move Confidence")
bgcolor(low_move_conf_zone ? color.new(color.orange, 94) : na, title="Low Move Confidence")

// ══════════════════════════════════════════════════════════════════════════════
// 🏷️ ENHANCED REASONING LABELS
// ══════════════════════════════════════════════════════════════════════════════

if buy_signal and show_reasoning
    label.new(bar_index, low * 0.997, 
              "🧠 MEM BUY SIGNAL\n" + 
              "💡 " + mem_reasoning + "\n" +
              "📊 Signal Confidence: " + str.tostring(mem_confidence * 100, "#") + "%\n" +
              "🎯 Direction: " + str.upper(mem_direction) + "\n" +
              "💰 Target: $" + str.tostring(mem_target_price, "#.##") + "\n" +
              "📈 Move 0.2%+ Confidence: " + str.tostring(mem_move_confidence * 100, "#") + "%\n" +
              "🔄 Reversal Risk: " + str.tostring(mem_reversal_probability * 100, "#") + "%\n" +
              "⏰ Expected Timeframe: " + mem_timeframe + "\n" +
              "⚠️ Risk Level: " + (mem_risk > 0.7 ? "HIGH" : mem_risk < 0.3 ? "LOW" : "MEDIUM"),
              style=label.style_label_up, color=buy_color, textcolor=color.white, 
              size=size.large)

if sell_signal and show_reasoning
    label.new(bar_index, high * 1.003,
              "🧠 MEM SELL SIGNAL\n" + 
              "💡 " + mem_reasoning + "\n" +
              "📊 Signal Confidence: " + str.tostring(mem_confidence * 100, "#") + "%\n" +
              "🎯 Direction: " + str.upper(mem_direction) + "\n" +
              "💰 Target: $" + str.tostring(mem_target_price, "#.##") + "\n" +
              "📉 Move 0.2%+ Confidence: " + str.tostring(mem_move_confidence * 100, "#") + "%\n" +
              "🔄 Reversal Risk: " + str.tostring(mem_reversal_probability * 100, "#") + "%\n" +
              "⏰ Expected Timeframe: " + mem_timeframe + "\n" +
              "⚠️ Risk Level: " + (mem_risk > 0.7 ? "HIGH" : mem_risk < 0.3 ? "LOW" : "MEDIUM"),
              style=label.style_label_down, color=sell_color, textcolor=color.white,
              size=size.large)

if analyze_signal and show_reasoning and bar_index % 8 == 0
    label.new(bar_index, (high + low) / 2,
              "🧠 MEM ANALYSIS MODE\n" + 
              "💭 " + mem_reasoning + "\n" +
              "📊 Confidence: " + str.tostring(mem_confidence * 100, "#") + "%\n" +
              "🎯 Direction Bias: " + str.upper(mem_direction) + "\n" +
              "🔄 Reversal Probability: " + str.tostring(mem_reversal_probability * 100, "#") + "%\n" +
              "⏰ Monitoring Timeframe: " + mem_timeframe,
              style=label.style_label_center, color=color.new(color.yellow, 20), 
              textcolor=color.black, size=size.normal)

// ══════════════════════════════════════════════════════════════════════════════
// 📋 COMPREHENSIVE STATUS TABLE
// ══════════════════════════════════════════════════════════════════════════════

var table mem_table = table.new(position.top_right, 2, enable_dynamic_timeframe ? 16 : 13, bgcolor=color.white, border_width=2)

if barstate.islast and show_status_table
    // Header
    table.cell(mem_table, 0, 0, "🧠 MEM+", 
               bgcolor=color.new(color.blue, 0), text_color=color.white, text_size=size.normal)
    
    status_text = data_received ? "LIVE" : "LOADING"
    status_color = data_received ? color.green : color.orange
    table.cell(mem_table, 1, 0, status_text, 
               bgcolor=color.new(status_color, 0), text_color=color.white, text_size=size.normal)
    
    // Action & Confidence
    action_color = mem_action == "BUY" ? color.lime : mem_action == "SELL" ? color.red : 
                   mem_action == "ANALYZE" ? color.yellow : color.gray
    table.cell(mem_table, 0, 1, "🎯 Action", text_color=color.black)
    table.cell(mem_table, 1, 1, mem_action, 
               bgcolor=action_color, text_color=color.white, text_size=size.normal)
    
    table.cell(mem_table, 0, 2, "📊 Confidence", text_color=color.black)
    conf_color = mem_confidence > 0.75 ? color.green : mem_confidence < 0.4 ? color.red : color.orange
    table.cell(mem_table, 1, 2, str.tostring(mem_confidence * 100, "#") + "%",
               bgcolor=conf_color, text_color=color.white)
    
    // Price & Direction
    table.cell(mem_table, 0, 3, "💰 Price", text_color=color.black)
    price_color = close > close[1] ? color.green : close < close[1] ? color.red : color.gray
    table.cell(mem_table, 1, 3, str.tostring(close, "#.##"),
               bgcolor=price_color, text_color=color.white)
    
    table.cell(mem_table, 0, 4, "🎯 Direction", text_color=color.black)
    direction_color = str.contains(mem_direction, "upward") ? color.green : 
                     str.contains(mem_direction, "downward") ? color.red : 
                     str.contains(mem_direction, "sideways") ? color.yellow : color.gray
    table.cell(mem_table, 1, 4, str.upper(str.replace_all(mem_direction, " ", "_")),
               bgcolor=direction_color, text_color=color.white)
    
    // Target & Risk
    table.cell(mem_table, 0, 5, "🎯 Target", text_color=color.black)
    target_change_pct = (mem_target_price - close) / close * 100
    target_color = target_change_pct > 0 ? color.green : target_change_pct < 0 ? color.red : color.gray
    target_text = str.tostring(mem_target_price, "#.##") + " (" + 
                  (target_change_pct > 0 ? "+" : "") + str.tostring(target_change_pct, "#.1") + "%)"
    table.cell(mem_table, 1, 5, target_text,
               bgcolor=target_color, text_color=color.white)
    
    table.cell(mem_table, 0, 6, "⚠️ Risk", text_color=color.black)
    risk_color = mem_risk > 0.7 ? color.red : mem_risk < 0.3 ? color.green : color.orange
    risk_text = mem_risk > 0.7 ? "HIGH" : mem_risk < 0.3 ? "LOW" : "MEDIUM"
    table.cell(mem_table, 1, 6, risk_text,
               bgcolor=risk_color, text_color=color.white)
    
    // Enhanced Analysis Metrics
    table.cell(mem_table, 0, 7, "📈 Move 0.2%+", text_color=color.black)
    move_conf_color = mem_move_confidence > 0.75 ? color.green : mem_move_confidence < 0.4 ? color.red : color.orange
    table.cell(mem_table, 1, 7, str.tostring(mem_move_confidence * 100, "#") + "%",
               bgcolor=move_conf_color, text_color=color.white)
    
    table.cell(mem_table, 0, 8, "🔄 Reversal Risk", text_color=color.black)
    reversal_color = mem_reversal_probability > 0.6 ? color.red : mem_reversal_probability < 0.3 ? color.green : color.orange
    table.cell(mem_table, 1, 8, str.tostring(mem_reversal_probability * 100, "#") + "%",
               bgcolor=reversal_color, text_color=color.white)
    
    // Performance Tracking (if enabled)
    if show_reversal_tracking and total_predictions > 5
        table.cell(mem_table, 0, 9, "🎯 Accuracy", text_color=color.black)
        accuracy_color = prediction_accuracy > 0.6 ? color.green : prediction_accuracy < 0.4 ? color.red : color.orange
        table.cell(mem_table, 1, 9, str.tostring(prediction_accuracy * 100, "#") + "%",
                   bgcolor=accuracy_color, text_color=color.white)
        
        table.cell(mem_table, 0, 10, "🔄 Actual Reversals", text_color=color.black)
        table.cell(mem_table, 1, 10, str.tostring(actual_reversal_rate * 100, "#") + "%",
                   bgcolor=color.new(color.purple, 20), text_color=color.white)
        
        table.cell(mem_table, 0, 11, "📊 Predictions", text_color=color.black)
        table.cell(mem_table, 1, 11, str.tostring(total_predictions), text_color=color.black)
    else
        table.cell(mem_table, 0, 9, "💭 Sentiment", text_color=color.black)
        sentiment_color = str.contains(mem_sentiment, "bullish") ? color.green : 
                         str.contains(mem_sentiment, "bearish") ? color.red : color.gray
        table.cell(mem_table, 1, 9, str.upper(str.replace_all(mem_sentiment, " ", "_")),
                   bgcolor=sentiment_color, text_color=color.white)
        
        table.cell(mem_table, 0, 10, "⏰ Timeframe", text_color=color.black)
        table.cell(mem_table, 1, 10, str.upper(str.replace_all(mem_timeframe, " ", "_")), text_color=color.black)
        
        table.cell(mem_table, 0, 11, "🔗 Server", text_color=color.black)
        table.cell(mem_table, 1, 11, server_ip + ":" + str.tostring(server_port), text_color=color.black)
        
        // Dynamic Timeframe Section (if enabled)
        if enable_dynamic_timeframe
            table.cell(mem_table, 0, 12, "⏰ Dynamic TF", text_color=color.black)
            tf_color = timeframe_category == "SCALPING" ? color.red :
                      timeframe_category == "SHORT-TERM" ? color.orange :
                      timeframe_category == "MEDIUM-TERM" ? color.yellow : color.green
            tf_text = str.tostring(optimal_timeframe_minutes, "#") + "min " + timeframe_category
            table.cell(mem_table, 1, 12, tf_text,
                       bgcolor=tf_color, text_color=color.white)
            
            table.cell(mem_table, 0, 13, "🌊 Market Regime", text_color=color.black)
            regime_color = market_regime == "BREAKOUT" ? color.red :
                          market_regime == "TRENDING" ? color.green :
                          market_regime == "CONSOLIDATION" ? color.blue : color.gray
            table.cell(mem_table, 1, 13, market_regime,
                       bgcolor=regime_color, text_color=color.white)
                       
            table.cell(mem_table, 0, 14, "📊 Vol+Volatility", text_color=color.black)
            conditions_text = volatility_level + "/" + volume_level
            conditions_color = (volatility_level == "High" and volume_level == "High") ? color.red :
                              (volatility_level == "High" or volume_level == "High") ? color.orange : color.green
            table.cell(mem_table, 1, 14, conditions_text,
                       bgcolor=conditions_color, text_color=color.white)
    
    // Last Update
    update_row = enable_dynamic_timeframe ? 15 : 12
    table.cell(mem_table, 0, update_row, "🕒 Updated", text_color=color.black)
    seconds_ago = (time - mem_last_update) / 1000
    update_text = seconds_ago < 5 ? "LIVE ●" : str.tostring(seconds_ago, "#") + "s ago"
    update_color = seconds_ago < 5 ? color.lime : seconds_ago < 30 ? color.yellow : color.gray
    table.cell(mem_table, 1, update_row, update_text, 
               bgcolor=color.new(update_color, 70), text_color=color.white)

// ══════════════════════════════════════════════════════════════════════════════
// 🎨 TARGET LINES & VISUAL ENHANCEMENTS
// ══════════════════════════════════════════════════════════════════════════════

// Entry and Target Lines
if buy_signal
    line.new(bar_index, close, bar_index + 12, close, 
             color=buy_color, width=2, style=line.style_dashed, extend=extend.none)
    line.new(bar_index, mem_target_price, bar_index + 25, mem_target_price,
             color=color.new(buy_color, 40), width=1, style=line.style_dotted, extend=extend.none)
    
if sell_signal
    line.new(bar_index, close, bar_index + 12, close,
             color=sell_color, width=2, style=line.style_dashed, extend=extend.none)
    line.new(bar_index, mem_target_price, bar_index + 25, mem_target_price,
             color=color.new(sell_color, 40), width=1, style=line.style_dotted, extend=extend.none)

// ══════════════════════════════════════════════════════════════════════════════
// 🔔 ENHANCED ALERT SYSTEM
// ══════════════════════════════════════════════════════════════════════════════

alertcondition(buy_signal, title="🧠 MEM+ Buy Signal", 
               message="🚀 MEM BUY {{ticker}} at {{close}} - Direction: UPWARD - Move Confidence: High")

alertcondition(sell_signal, title="🧠 MEM+ Sell Signal",
               message="📉 MEM SELL {{ticker}} at {{close}} - Direction: DOWNWARD - Move Confidence: High")

alertcondition(strong_upward, title="🚀 MEM Strong Upward",
               message="🚀 MEM predicts STRONG UPWARD move for {{ticker}} - High move confidence detected")

alertcondition(strong_downward, title="📉 MEM Strong Downward", 
               message="📉 MEM predicts STRONG DOWNWARD move for {{ticker}} - High move confidence detected")

alertcondition(high_move_confidence, title="💎 MEM High Move Confidence",
               message="💎 MEM shows HIGH MOVE CONFIDENCE for {{ticker}} - 0.2%+ directional move expected")

alertcondition(low_reversal_risk, title="🛡️ MEM Low Reversal Risk",
               message="🛡️ MEM shows LOW REVERSAL RISK for {{ticker}} - Strong directional conviction")

alertcondition(mem_confidence > 0.85, title="🎯 MEM Ultra High Confidence",
               message="🎯 MEM ULTRA HIGH CONFIDENCE for {{ticker}} - Exceptional signal strength detected")

// ══════════════════════════════════════════════════════════════════════════════
// 📋 SYSTEM INFORMATION
// ══════════════════════════════════════════════════════════════════════════════
//
// MEM Enhanced Trading Companion v2.0
// =====================================
//
// 🎯 NEW FEATURES:
// • Move Confidence: Probability of 0.2%+ directional move
// • Reversal Tracking: Real-time reversal probability analysis  
// • Enhanced Direction Predictions: Strong/moderate directional bias
// • Performance Tracking: Success rate and actual reversal statistics
// • Advanced Visual Indicators: Direction strength arrows and confidence zones
// • Comprehensive Alert System: Multiple alert types for different scenarios
//
// 🔧 SETUP:
// 1. Run MEM companion server: python3 mem_tradingview_companion.py
// 2. Server IP: 216.238.90.131:5003 (already configured)
// 3. Add indicator to your TradingView chart
// 4. Enable desired visual elements and alerts
// 5. Watch MEM's enhanced AI analysis with move confidence!
//
// 📊 KEY METRICS:
// • Signal Confidence: Overall prediction confidence (0-100%)
// • Move Confidence: Probability of 0.2%+ move in predicted direction
// • Reversal Risk: Probability of direction reversal
// • Prediction Accuracy: Historical success rate (when tracking enabled)
//
// ⚡ INTEGRATION:
// • TradeStation Paper Trading: Auto-execution ready
// • Webhook Alerts: TradingView → MEM → TradeStation bridge
// • Custom Indicators: Your indicators influence MEM decisions
// • Real-time Updates: Live streaming analysis with <5 second updates
//
// ══════════════════════════════════════════════════════════════════════════════