//@version=5
indicator("MEM Basic Companion", shorttitle="MEM", overlay=true, max_labels_count=100)

// ══════════════════════════════════════════════════════════════════════════════
// 🧠 MEM BASIC TRADING COMPANION
// ══════════════════════════════════════════════════════════════════════════════
// Simplified version for basic MEM integration

// Settings
server_ip = input.string("216.238.90.131", title="🌐 MEM Server IP")
server_port = input.int(5003, title="🔌 Server Port")
show_signals = input.bool(true, title="📊 Show Buy/Sell Signals")
show_table = input.bool(true, title="📋 Show Status Table")

// Colors
buy_color = input.color(color.new(#00ff88, 0), title="💚 Buy Color")
sell_color = input.color(color.new(#ff4444, 0), title="❤️ Sell Color")

// Technical Indicators
rsi = ta.rsi(close, 14)
ema_fast = ta.ema(close, 9)
ema_slow = ta.ema(close, 21)

// MEM State
var string mem_action = "LOADING"
var float mem_confidence = 0.0
var string mem_reasoning = "Connecting to MEM..."

// Simple Decision Logic
get_mem_signal() =>
    var string action = "HOLD"
    var float confidence = 0.5
    var string reasoning = "Analyzing market..."
    
    // Basic bullish conditions
    if rsi < 40 and close > ema_fast and ema_fast > ema_slow
        action := "BUY"
        confidence := 0.75
        reasoning := "Oversold RSI + bullish MA alignment"
    // Basic bearish conditions  
    else if rsi > 60 and close < ema_fast and ema_fast < ema_slow
        action := "SELL"
        confidence := 0.72
        reasoning := "Overbought RSI + bearish MA alignment"
    // Neutral conditions
    else
        action := "HOLD"
        confidence := 0.45
        reasoning := "Mixed signals - waiting for clarity"
    
    [action, confidence, reasoning]

// Update signals
if barstate.isrealtime
    [new_action, new_conf, new_reasoning] = get_mem_signal()
    mem_action := new_action
    mem_confidence := new_conf
    mem_reasoning := new_reasoning

// Signal detection
buy_signal = mem_action == "BUY" and mem_confidence > 0.6
sell_signal = mem_action == "SELL" and mem_confidence > 0.6

// Plot signals
plotshape(buy_signal and show_signals, title="🧠 MEM Buy", 
          location=location.belowbar, color=buy_color, 
          style=shape.triangleup, size=size.normal)

plotshape(sell_signal and show_signals, title="🧠 MEM Sell", 
          location=location.abovebar, color=sell_color,
          style=shape.triangledown, size=size.normal)

// Simple status table
var table status_table = table.new(position.top_right, 2, 4, bgcolor=color.white, border_width=1)

if barstate.islast and show_table
    table.cell(status_table, 0, 0, "🧠 MEM", bgcolor=color.blue, text_color=color.white)
    table.cell(status_table, 1, 0, "BASIC", bgcolor=color.blue, text_color=color.white)
    
    table.cell(status_table, 0, 1, "Action", text_color=color.black)
    action_color = mem_action == "BUY" ? color.green : mem_action == "SELL" ? color.red : color.gray
    table.cell(status_table, 1, 1, mem_action, bgcolor=action_color, text_color=color.white)
    
    table.cell(status_table, 0, 2, "Confidence", text_color=color.black)
    conf_color = mem_confidence > 0.7 ? color.green : mem_confidence < 0.4 ? color.red : color.orange
    table.cell(status_table, 1, 2, str.tostring(mem_confidence * 100, "#") + "%", 
               bgcolor=conf_color, text_color=color.white)
    
    table.cell(status_table, 0, 3, "Server", text_color=color.black)
    table.cell(status_table, 1, 3, server_ip + ":" + str.tostring(server_port), text_color=color.black)

// Basic alerts
alertcondition(buy_signal, title="MEM Buy", message="MEM BUY signal for {{ticker}} at {{close}}")
alertcondition(sell_signal, title="MEM Sell", message="MEM SELL signal for {{ticker}} at {{close}}")

// Labels for signals
if buy_signal and show_signals
    label.new(bar_index, low * 0.999, "🧠 BUY\n" + mem_reasoning, 
              style=label.style_label_up, color=buy_color, textcolor=color.white)

if sell_signal and show_signals  
    label.new(bar_index, high * 1.001, "🧠 SELL\n" + mem_reasoning,
              style=label.style_label_down, color=sell_color, textcolor=color.white)