name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend

    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./backend

    - name: Run tests with coverage
      run: |
        dotnet test \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --filter "Category!=Integration&Category!=ExternalAPI" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      working-directory: ./backend

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'backend/coverage/**/coverage.opencover.xml'
        targetdir: 'backend/coverage-report'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
        assemblyfilters: '-xunit*;-*.Tests'

    - name: Add coverage to PR
      if: github.event_name == 'pull_request'
      run: |
        if [ -f backend/coverage-report/SummaryGithub.md ]; then
          cat backend/coverage-report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: backend/coverage-report/
        retention-days: 30

    - name: Coverage Summary
      run: |
        echo "## Code Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f backend/coverage-report/SummaryGithub.md ]; then
          cat backend/coverage-report/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        else
          echo "Coverage report generation failed or no coverage data available." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check coverage threshold
      run: |
        # Extract line coverage percentage from Cobertura XML
        if [ -f backend/coverage-report/Cobertura.xml ]; then
          COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' backend/coverage-report/Cobertura.xml | head -1)
          COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc)
          echo "Current coverage: $COVERAGE_PERCENT%"

          # Check if coverage is below 70%
          if (( $(echo "$COVERAGE < 0.70" | bc -l) )); then
            echo "::warning::Code coverage ($COVERAGE_PERCENT%) is below 70% threshold"
          else
            echo "âœ… Code coverage ($COVERAGE_PERCENT%) meets 70% threshold"
          fi
        fi
