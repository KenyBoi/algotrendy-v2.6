name: Code Analysis

on:
  push:
    branches: [ main, development, modular ]
  pull_request:
    branches: [ main, development, modular ]
  schedule:
    # Run weekly on Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  dotnet-analysis:
    name: .NET Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore backend/AlgoTrendy.sln

      - name: Build solution
        run: dotnet build backend/AlgoTrendy.sln --configuration Release --no-restore

      - name: Run .NET Code Analysis
        run: |
          dotnet format backend/AlgoTrendy.sln --verify-no-changes --verbosity diagnostic || true
          dotnet build backend/AlgoTrendy.sln /p:RunAnalyzers=true /p:TreatWarningsAsErrors=false

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones disabled for better analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarCloud scanner
        run: dotnet tool install --global dotnet-sonarscanner || true

      - name: Restore dependencies
        run: dotnet restore backend/AlgoTrendy.sln

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"KenyBoi_algotrendy-v2.6" \
            /o:"kenyboi" \
            /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
        continue-on-error: true

      - name: Build solution
        run: dotnet build backend/AlgoTrendy.sln --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          dotnet test backend/AlgoTrendy.sln \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        continue-on-error: true

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${SONAR_TOKEN}"
        continue-on-error: true

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install dotnet-outdated
        run: dotnet tool install --global dotnet-outdated-tool

      - name: Check for outdated packages
        run: dotnet outdated backend/AlgoTrendy.sln
        continue-on-error: true

      - name: Run security audit
        run: |
          cd backend
          dotnet list package --vulnerable --include-transitive 2>&1 | tee security-audit.txt
          if grep -q "has the following vulnerable packages" security-audit.txt; then
            echo "::warning::Vulnerable packages detected. Review the security audit report."
            exit 1
          fi
        continue-on-error: true

  code-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore backend/AlgoTrendy.sln

      - name: Build solution
        run: dotnet build backend/AlgoTrendy.sln --configuration Release --no-restore

      - name: Generate code metrics
        run: |
          # Install metrics tool
          dotnet tool install --global dotnet-reportgenerator-globaltool || true

          # Run tests with coverage
          dotnet test backend/AlgoTrendy.sln \
            --configuration Release \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage

          # Generate coverage report
          reportgenerator \
            -reports:./coverage/**/coverage.cobertura.xml \
            -targetdir:./coverage-report \
            -reporttypes:Html;TextSummary

          # Display summary
          cat ./coverage-report/Summary.txt || echo "No coverage summary available"
        continue-on-error: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report
        continue-on-error: true

  eslint:
    name: ESLint Analysis (Frontend)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint || true
        continue-on-error: true

  summary:
    name: Analysis Summary
    runs-on: ubuntu-latest
    needs: [dotnet-analysis, security-scan, code-metrics, eslint]
    if: always()

    steps:
      - name: Analysis Summary
        run: |
          echo "## Code Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| .NET Analysis | ${{ needs.dotnet-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Metrics | ${{ needs.code-metrics.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ needs.eslint.result }} |" >> $GITHUB_STEP_SUMMARY
