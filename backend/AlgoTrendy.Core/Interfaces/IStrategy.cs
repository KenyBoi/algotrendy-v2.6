namespace AlgoTrendy.Core.Interfaces;

using AlgoTrendy.Core.Models;

/// <summary>
/// Interface for trading strategies
/// </summary>
public interface IStrategy
{
    /// <summary>
    /// Name of the strategy
    /// </summary>
    string StrategyName { get; }

    /// <summary>
    /// Analyzes market data and generates trading signals
    /// </summary>
    /// <param name="currentData">Current market data point</param>
    /// <param name="historicalData">Historical market data for analysis</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>Trading signal with action and confidence</returns>
    Task<TradingSignal> AnalyzeAsync(
        MarketData currentData,
        IEnumerable<MarketData> historicalData,
        CancellationToken cancellationToken = default
    );
}

/// <summary>
/// Represents a trading signal generated by a strategy
/// </summary>
public class TradingSignal
{
    /// <summary>
    /// The recommended action (Buy, Sell, Hold)
    /// </summary>
    public required SignalAction Action { get; set; }

    /// <summary>
    /// Confidence level of the signal (0.0 - 1.0)
    /// </summary>
    public required decimal Confidence { get; set; }

    /// <summary>
    /// Recommended entry price for the trade
    /// </summary>
    public decimal? EntryPrice { get; set; }

    /// <summary>
    /// Recommended stop loss price
    /// </summary>
    public decimal? StopLoss { get; set; }

    /// <summary>
    /// Recommended take profit price
    /// </summary>
    public decimal? TakeProfit { get; set; }

    /// <summary>
    /// Human-readable reason for the signal
    /// </summary>
    public required string Reason { get; set; }

    /// <summary>
    /// Timestamp when signal was generated
    /// </summary>
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Symbol this signal applies to
    /// </summary>
    public string? Symbol { get; set; }
}

/// <summary>
/// Trading signal actions
/// </summary>
public enum SignalAction
{
    /// <summary>
    /// Buy signal - open long position
    /// </summary>
    Buy,

    /// <summary>
    /// Sell signal - open short position or close long
    /// </summary>
    Sell,

    /// <summary>
    /// Hold signal - maintain current position
    /// </summary>
    Hold
}
