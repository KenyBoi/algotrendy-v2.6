version: '3.8'

# ============================================================================
# AlgoTrendy v2.6 - Docker Compose Configuration
# ============================================================================
# Services:
#   - api: .NET 8 API (AlgoTrendy.API)
#   - questdb: Time-series database
#   - nginx: Reverse proxy with SSL termination
# ============================================================================

networks:
  algotrendy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  questdb_data:
    driver: local
  api_logs:
    driver: local
  nginx_ssl:
    driver: local
  seq_data:
    driver: local
  ml_logs:
    driver: local
  backtesting_py_logs:
    driver: local
  lean_algorithms:
    driver: local
  lean_results:
    driver: local
  lean_data:
    driver: local

services:
  # ==========================================================================
  # QuestDB - Time-Series Database
  # ==========================================================================
  questdb:
    image: questdb/questdb:latest
    container_name: algotrendy-questdb
    restart: unless-stopped
    networks:
      algotrendy-network:
        ipv4_address: 172.20.0.10
    ports:
      # HTTP API and Web Console
      - "9000:9000"
      # PostgreSQL wire protocol (used by API)
      - "8812:8812"
      # InfluxDB line protocol
      - "9009:9009"
    volumes:
      - questdb_data:/var/lib/questdb
    environment:
      - QDB_TELEMETRY_ENABLED=false
      - QDB_PG_USER=${QUESTDB_USER:-admin}
      - QDB_PG_PASSWORD=${QUESTDB_PASSWORD:-quest}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # AlgoTrendy API - .NET 8 Application
  # ==========================================================================
  # ==========================================================================
  # ML Service - Python Flask Microservice
  # ==========================================================================
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    image: algotrendy-ml-service:v1.0
    container_name: algotrendy-ml-service
    restart: unless-stopped
    user: "1000:1000"  # Security: Run as non-root user
    networks:
      algotrendy-network:
        ipv4_address: 172.20.0.50
    ports:
      - "5003:5003"
    volumes:
      - ml_logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=${FLASK_ENV:-production}
    healthcheck:
      test: ["CMD", "python3", "-c", "import socket; s=socket.socket(); s.settimeout(5); s.connect(('127.0.0.1', 5003))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # Backtesting.py Service - Python Flask Microservice (4th Engine)
  # ==========================================================================
  backtesting-py-service:
    build:
      context: ./backtesting-py-service
      dockerfile: Dockerfile
    image: algotrendy-backtesting-py:v1.0
    container_name: algotrendy-backtesting-py
    restart: unless-stopped
    user: "1000:1000"  # Security: Run as non-root user
    depends_on:
      - questdb
    networks:
      algotrendy-network:
        ipv4_address: 172.20.0.55
    ports:
      - "5004:5004"
    volumes:
      - backtesting_py_logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=${FLASK_ENV:-production}
      - QUESTDB_HOST=questdb
      - QUESTDB_PORT=8812
      - QUESTDB_USER=${QUESTDB_USER:-admin}
      - QUESTDB_PASSWORD=${QUESTDB_PASSWORD:-quest}
      - QUESTDB_DATABASE=qdb
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 sh -c ':> /dev/tcp/127.0.0.1/5004' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # LEAN Engine - Local Backtesting (Optional)
  # ==========================================================================
  # Uncomment this service to enable local LEAN backtesting
  # Note: This is OPTIONAL - backtesting works without it (using Cloud or Custom engine)
  #
  # lean:
  #   build:
  #     context: ./docker/lean
  #     dockerfile: Dockerfile
  #   image: algotrendy/lean:latest
  #   container_name: algotrendy-lean
  #   restart: "no"  # Only runs on-demand, not persistent
  #   networks:
  #     algotrendy-network:
  #       ipv4_address: 172.20.0.60
  #   volumes:
  #     - lean_algorithms:/algorithms
  #     - lean_results:/results
  #     - lean_data:/data
  #   environment:
  #     - JOB_USER_ID=0
  #     - API_ACCESS_TOKEN=
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  # ==========================================================================
  # AlgoTrendy API - .NET 8 Application
  # ==========================================================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: algotrendy-api:v2.6
    container_name: algotrendy-api
    restart: unless-stopped
    user: "1000:1000"  # Security: Run as non-root user
    depends_on:
      - questdb
      - seq
      - ml-service
      - backtesting-py-service
    networks:
      algotrendy-network:
        ipv4_address: 172.20.0.20
    ports:
      - "5002:5002"
    volumes:
      - api_logs:/app/logs
    environment:
      # Application Settings
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5002

      # Database Connection
      - ConnectionStrings__QuestDB=Host=questdb;Port=8812;Database=qdb;Username=${QUESTDB_USER:-admin};Password=${QUESTDB_PASSWORD:-quest}

      # Logging
      - Serilog__MinimumLevel__Default=${API_LOG_LEVEL:-Information}
      - SEQ_URL=http://seq:5341
      - SEQ_API_KEY=${SEQ_API_KEY:-}

      # Binance API (from .env file)
      - Binance__ApiKey=${BINANCE_API_KEY:-}
      - Binance__ApiSecret=${BINANCE_API_SECRET:-}
      - Binance__UseTestnet=${BINANCE_TESTNET:-true}

      # CORS Settings
      - AllowedOrigins=${ALLOWED_ORIGINS:-http://localhost:3000,https://localhost}

      # Market Data Settings
      - MarketData__FetchIntervalSeconds=${MARKET_DATA_FETCH_INTERVAL:-60}

      # ML Service Settings
      - MLService__Url=http://ml-service:5003
      - MLService__TimeoutSeconds=30
      - MLService__EnableMLEnhancement=${ML_ENHANCEMENT_ENABLED:-true}

      # Backtesting.py Service Settings
      - BacktestingPyService__Url=http://backtesting-py-service:5004
      - BacktestingPyService__TimeoutSeconds=300
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # Seq - Structured Log Viewer
  # ==========================================================================
  seq:
    image: datalust/seq:latest
    container_name: algotrendy-seq
    restart: unless-stopped
    networks:
      algotrendy-network:
        ipv4_address: 172.20.0.40
    ports:
      - "5341:80"
    volumes:
      - seq_data:/data
    environment:
      - ACCEPT_EULA=Y
      - SEQ_CACHE_SYSTEMRAMTARGET=0.5
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # Frontend - React + Vite Trading Interface
  # ==========================================================================
  frontend:
    build:
      context: ./docs/design/algotrendy_browser_figma
      dockerfile: Dockerfile
    image: algotrendy-frontend:v1.0
    container_name: algotrendy-frontend
    restart: unless-stopped
    depends_on:
      - api
    networks:
      algotrendy-network:
        ipv4_address: 172.20.0.25
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://api:5002/api
      - VITE_WS_URL=http://api:5002/hubs/market
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # Nginx - Reverse Proxy with SSL Termination
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: algotrendy-nginx
    restart: unless-stopped
    depends_on:
      - api
      - frontend
    networks:
      algotrendy-network:
        ipv4_address: 172.20.0.30
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_ssl:/etc/letsencrypt:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
