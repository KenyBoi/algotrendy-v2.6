#!/bin/bash

# =============================================================================
# AlgoTrendy v2.6 - Port Agent (Docker Edition)
# =============================================================================
# Manages AlgoTrendy v2.6 Docker containers with port management
# =============================================================================

set -euo pipefail

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMPOSE_FILE="$SCRIPT_DIR/docker-compose.yml"
COMPOSE_PROD_FILE="$SCRIPT_DIR/docker-compose.prod.yml"

# Service ports
declare -A SERVICES=(
    ["api"]="5002"
    ["questdb-web"]="9000"
    ["questdb-pg"]="8812"
    ["questdb-influx"]="9009"
)

# =============================================================================
# UTILITY FUNCTIONS
# =============================================================================

log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] ✅${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] ⚠️${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ❌${NC} $1"
}

log_info() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')] ℹ️${NC} $1"
}

show_banner() {
    echo
    echo -e "${PURPLE}============================================================${NC}"
    echo -e "${PURPLE}  🚀 AlgoTrendy v2.6 - Port Agent System (Docker)${NC}"
    echo -e "${PURPLE}============================================================${NC}"
    echo
}

# =============================================================================
# DOCKER FUNCTIONS
# =============================================================================

check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed!"
        exit 1
    fi

    if ! docker ps &> /dev/null; then
        log_error "Docker daemon is not running or you don't have permission!"
        exit 1
    fi
}

check_compose_file() {
    if [ ! -f "$COMPOSE_FILE" ]; then
        log_error "docker-compose.yml not found in $SCRIPT_DIR"
        exit 1
    fi
}

get_container_status() {
    local container_name=$1
    if docker ps -a --filter "name=$container_name" --format "{{.Status}}" 2>/dev/null | grep -q "Up"; then
        echo "running"
    elif docker ps -a --filter "name=$container_name" --format "{{.Status}}" 2>/dev/null | grep -q "Exited"; then
        echo "stopped"
    else
        echo "not_found"
    fi
}

check_port_conflicts() {
    log_info "Checking for port conflicts..."
    local conflicts=0

    for service in "${!SERVICES[@]}"; do
        local port=${SERVICES[$service]}
        if lsof -ti:$port >/dev/null 2>&1; then
            local pid=$(lsof -ti:$port)
            local process=$(ps -p $pid -o comm= 2>/dev/null || echo "unknown")

            # Check if it's our Docker container
            if ! docker ps --filter "publish=$port" --format "{{.Names}}" 2>/dev/null | grep -q "algotrendy"; then
                log_warning "Port $port ($service) is in use by PID $pid ($process)"
                conflicts=$((conflicts + 1))
            fi
        fi
    done

    if [ $conflicts -gt 0 ]; then
        echo
        log_warning "Found $conflicts port conflict(s)"
        echo
        read -p "Do you want to continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 0
        fi
    fi
}

# =============================================================================
# SERVICE MANAGEMENT
# =============================================================================

start_services() {
    show_banner
    check_docker
    check_compose_file
    check_port_conflicts

    log_info "Starting AlgoTrendy v2.6 services..."

    if docker compose -f "$COMPOSE_FILE" up -d; then
        echo
        log_success "Services started successfully!"
        echo
        show_status
        show_urls
    else
        log_error "Failed to start services"
        exit 1
    fi
}

stop_services() {
    show_banner
    check_docker
    check_compose_file

    log_info "Stopping AlgoTrendy v2.6 services..."

    if docker compose -f "$COMPOSE_FILE" down; then
        log_success "All services stopped"
    else
        log_error "Failed to stop services"
        exit 1
    fi
}

restart_services() {
    show_banner
    log_info "Restarting AlgoTrendy v2.6 services..."

    stop_services
    sleep 2
    start_services
}

show_status() {
    echo -e "${CYAN}📊 Service Status:${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

    # Check API container
    local api_status=$(get_container_status "algotrendy-api")
    local api_health=$(docker inspect --format='{{.State.Health.Status}}' algotrendy-api 2>/dev/null || echo "no-health-check")

    if [ "$api_status" == "running" ]; then
        if [ "$api_health" == "healthy" ]; then
            echo -e "${GREEN}✅ API Server       ${NC}Port 5002  ${GREEN}[HEALTHY]${NC}"
        else
            echo -e "${YELLOW}⚠️  API Server       ${NC}Port 5002  ${YELLOW}[STARTING]${NC}"
        fi
    else
        echo -e "${RED}❌ API Server       ${NC}Port 5002  ${RED}[STOPPED]${NC}"
    fi

    # Check QuestDB container
    local db_status=$(get_container_status "algotrendy-questdb")
    local db_health=$(docker inspect --format='{{.State.Health.Status}}' algotrendy-questdb 2>/dev/null || echo "no-health-check")

    if [ "$db_status" == "running" ]; then
        if [ "$db_health" == "healthy" ]; then
            echo -e "${GREEN}✅ QuestDB          ${NC}Port 9000  ${GREEN}[HEALTHY]${NC}"
        else
            echo -e "${YELLOW}⚠️  QuestDB          ${NC}Port 9000  ${YELLOW}[STARTING]${NC}"
        fi
    else
        echo -e "${RED}❌ QuestDB          ${NC}Port 9000  ${RED}[STOPPED]${NC}"
    fi

    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

show_urls() {
    echo
    echo -e "${GREEN}🌐 Service URLs:${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}  API Health:      ${NC}http://localhost:5002/health"
    echo -e "${GREEN}  API Swagger:     ${NC}http://localhost:5002/swagger"
    echo -e "${GREEN}  QuestDB Web UI:  ${NC}http://localhost:9000"
    echo -e "${GREEN}  QuestDB PG:      ${NC}localhost:8812"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
}

show_logs() {
    local service=${1:-}

    if [ -z "$service" ]; then
        log_info "Showing logs for all services (Ctrl+C to exit)..."
        docker compose -f "$COMPOSE_FILE" logs -f
    else
        log_info "Showing logs for $service (Ctrl+C to exit)..."
        docker compose -f "$COMPOSE_FILE" logs -f "$service"
    fi
}

show_help() {
    show_banner
    echo -e "${CYAN}Usage:${NC}"
    echo -e "  ${GREEN}./port_agent start${NC}          Start all services"
    echo -e "  ${GREEN}./port_agent stop${NC}           Stop all services"
    echo -e "  ${GREEN}./port_agent restart${NC}        Restart all services"
    echo -e "  ${GREEN}./port_agent status${NC}         Show service status"
    echo -e "  ${GREEN}./port_agent logs [service]${NC} Show logs (optional: specify service)"
    echo -e "  ${GREEN}./port_agent health${NC}         Run health checks"
    echo -e "  ${GREEN}./port_agent help${NC}           Show this help message"
    echo
    echo -e "${CYAN}Services:${NC}"
    echo -e "  ${GREEN}api${NC}      - AlgoTrendy API (port 5002)"
    echo -e "  ${GREEN}questdb${NC}  - QuestDB Time-Series Database (ports 9000, 8812, 9009)"
    echo
    echo -e "${CYAN}Examples:${NC}"
    echo -e "  ${GREEN}./port_agent start${NC}          # Start all services"
    echo -e "  ${GREEN}./port_agent logs api${NC}       # Show API logs"
    echo -e "  ${GREEN}./port_agent restart${NC}        # Restart everything"
    echo
}

run_health_checks() {
    show_banner
    log_info "Running health checks..."
    echo

    # Check API health
    if curl -sf http://localhost:5002/health > /dev/null 2>&1; then
        log_success "API health check passed"
    else
        log_error "API health check failed"
    fi

    # Check QuestDB
    if curl -sf http://localhost:9000 > /dev/null 2>&1; then
        log_success "QuestDB web UI accessible"
    else
        log_error "QuestDB web UI not accessible"
    fi

    # Check QuestDB PostgreSQL port
    if nc -z localhost 8812 2>/dev/null; then
        log_success "QuestDB PostgreSQL port (8812) is open"
    else
        log_error "QuestDB PostgreSQL port (8812) is not accessible"
    fi

    echo
    show_status
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

main() {
    local command=${1:-start}

    case "$command" in
        start)
            start_services
            ;;
        stop)
            stop_services
            ;;
        restart)
            restart_services
            ;;
        status)
            show_banner
            show_status
            show_urls
            ;;
        logs)
            show_logs "${2:-}"
            ;;
        health)
            run_health_checks
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            echo
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
